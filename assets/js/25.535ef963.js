(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{424:function(s,t,a){"use strict";a.r(t);var e=a(34),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"网络通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络通信"}},[s._v("#")]),s._v(" 网络通信")]),s._v(" "),a("h2",{attrs:{id:"tcp和udp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp"}},[s._v("#")]),s._v(" TCP和UDP")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://hcx-blog-images.oss-cn-chengdu.aliyuncs.com/images/20220318142803.png",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("TCP(Transmission Control Protocol 传输控制协议)是一种面向连接(连接导向)的、可靠的、 基于IP的传输层协议。")]),s._v(" "),a("li",[s._v("UDP是User Datagram Protocol的简称，中文名是用户数据报协议，是OSI参考模型中的传输层协议，它是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。")]),s._v(" "),a("li",[s._v("TCP和UDP都是来自于传输层的协议。传输层位于应用层和网络层之间，负责位于不同主机中进程之间的通信。")])]),s._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://hcx-blog-images.oss-cn-chengdu.aliyuncs.com/images/20220318143123.png",alt:""}})]),s._v(" "),a("ol",[a("li",[s._v("TCP基于连接UDP无连接")]),s._v(" "),a("li",[s._v("TCP要求系统资源较多，UDP较少")]),s._v(" "),a("li",[s._v("TCP保证数据正确性，UDP可能丢包")]),s._v(" "),a("li",[s._v("TCP保证数据顺序，UDP不保证")])]),s._v(" "),a("h2",{attrs:{id:"http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http协议"}},[s._v("#")]),s._v(" HTTP协议")]),s._v(" "),a("ul",[a("li",[s._v("客户端和服务器端之间数据传输的格式规范，格式简称为“超文本传输协议”。")]),s._v(" "),a("li",[s._v("是一个基于请求与响应模式的、无状态的、应用层的协议，基于 TCP 的连接方式")])]),s._v(" "),a("h2",{attrs:{id:"http1-0-1-1-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-1-1-2-0"}},[s._v("#")]),s._v(" HTTP1.0 & 1.1 & 2.0")]),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/blog/HTTP1.0 VS HTTP1.1 VS HTTP2.0.html"}},[s._v("HTTP1.0 & 1.1 & 2.0区别")])],1),s._v(" "),a("h2",{attrs:{id:"从输入url地址到看到页面-中间都经历了啥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从输入url地址到看到页面-中间都经历了啥"}},[s._v("#")]),s._v(" 从输入URL地址到看到页面，中间都经历了啥")]),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/blog/performance_optimization.html#从输入url地址到看到页面中间都经历了啥"}},[s._v("从输入URL地址到看到页面，中间都经历了啥")])],1),s._v(" "),a("h2",{attrs:{id:"tcp的三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp的三次握手"}},[s._v("#")]),s._v(" TCP的三次握手")]),s._v(" "),a("p",[s._v("为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("第一次握手：客户端给服务器发送一个SYN。客户端发送网络包，服务端收到了。服务器得出结论：客户端的发送能力，服务端的接收能力正常。")])]),s._v(" "),a("li",[a("p",[s._v("第二次握手：服务端收到SYN报文之后，会应答一个SYN+ACK报文。服务端发包，客户端收到了。客户端得出结论：服务端的接收和发送能力，客户端的接收和发送能力正常。但是此时服务端不能确认客户端的接收能力是否正常。")])]),s._v(" "),a("li",[a("p",[s._v("第三次握手;客户端收到SYN+ACK报文之后，回应一个ACK报文。客户端发包，服务端收到了。服务器得出结论：客户端的接收和发送能力，自己的接收发送能力都正常。\n通过三次握手，双方都确认对方的接收以及发送能力正常。")])]),s._v(" "),a("li",[a("p",[s._v("seq序号，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记")])]),s._v(" "),a("li",[a("p",[s._v("ack确认序号，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1")])]),s._v(" "),a("li",[a("p",[s._v("标志位")]),s._v(" "),a("ul",[a("li",[s._v("ACK：确认序号有效")]),s._v(" "),a("li",[s._v("RST：重置连接")]),s._v(" "),a("li",[s._v("SYN：发起一个新连接\n"),a("ul",[a("li",[s._v("同步序列编号（Synchronize Sequence Numbers）。是TCP/IP建立连接时使用的握手信号。")])])]),s._v(" "),a("li",[s._v("FIN：释放一个连接3")]),s._v(" "),a("li",[s._v("……")])])])]),s._v(" "),a("h3",{attrs:{id:"⭐三次握手为什么不用两次-或者四次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⭐三次握手为什么不用两次-或者四次"}},[s._v("#")]),s._v(" ⭐三次握手为什么不用两次，或者四次?")]),s._v(" "),a("p",[s._v("TCP作为一种可靠传输控制协议，其核心思想：既要保证数据可靠传输，又要提高传输的效率！\n"),a("img",{attrs:{src:"https://hcx-blog-images.oss-cn-chengdu.aliyuncs.com/images/20220318143827.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"⭐为什么连接的时候是三次握手-关闭的时候却是四次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⭐为什么连接的时候是三次握手-关闭的时候却是四次握手"}},[s._v("#")]),s._v(" ⭐为什么连接的时候是三次握手，关闭的时候却是四次握手？")]),s._v(" "),a("p",[s._v("服务器端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文")]),s._v(" "),a("p",[s._v("但关闭连接时，当服务器端收到FIN报文时，很可能并不会立即关闭链接，所以只能先回复一个ACK报文，告诉客户端：”你发的FIN报文我收到了”，只有等到服务器端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四步握手。")]),s._v(" "),a("h2",{attrs:{id:"http中重定向和请求转发的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http中重定向和请求转发的区别"}},[s._v("#")]),s._v(" HTTP中重定向和请求转发的区别")]),s._v(" "),a("p",[s._v("实现：")]),s._v(" "),a("ul",[a("li",[s._v('转发：用request的getRequestDispatcher()方法得到ReuqestDispatcher对象，调用forward（）方法\nrequest.getRequestDispatcher("other.jsp").forward(request, response);')]),s._v(" "),a("li",[s._v('重定向：调用response的sendRedirect(）方法\nresponse.sendRedirect("other.jsp");')])]),s._v(" "),a("ol",[a("li",[s._v("重定向2次请求，请求转发1次请求")]),s._v(" "),a("li",[s._v("重定向地址栏会变，请求转发地址栏不变")]),s._v(" "),a("li",[s._v("重定向是浏览器跳转，请求转发是服务器跳转")]),s._v(" "),a("li",[s._v("重定向可以跳转到任意网址，请求转发只能跳转当前项目")])]),s._v(" "),a("h2",{attrs:{id:"get和post的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get和post的区别"}},[s._v("#")]),s._v(" Get和Post的区别")]),s._v(" "),a("ol",[a("li",[s._v("Get是不安全的，因为在传输过程，数据被放在请求的URL中；Post的所有操作对用户来说都是不可见的。")]),s._v(" "),a("li",[s._v("Get传送的数据量较小，一般传输数据大小不超过2k-4k（根据浏览器不同，限制不一样，但相差不大这主要是因为受URL长度限制；Post传送的数据量较大，一般被默认为不受限制。")]),s._v(" "),a("li",[s._v("Get限制Form表单的数据集的值必须为ASCII字符；而Post支持整个ISO10646字符集。")]),s._v(" "),a("li",[s._v("Get执行效率却比Post方法好。Get是form提交的默认方法。")])]),s._v(" "),a("h2",{attrs:{id:"cookie和session的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie和session的区别"}},[s._v("#")]),s._v(" cookie和session的区别")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("存储位置不同")]),s._v(" "),a("p",[s._v("cookie的数据信息存放在客户端浏览器上。")]),s._v(" "),a("p",[s._v("session的数据信息存放在服务器上。")])]),s._v(" "),a("li",[a("p",[s._v("存储容量不同")]),s._v(" "),a("p",[s._v("单个cookie保存的数据<=4KB，一个站点最多保存20个Cookie。")]),s._v(" "),a("p",[s._v("对于session来说并没有上限，但出于对服务器端的性能考虑，session内不要存放过多的东西，并且设置session删除机制。")])]),s._v(" "),a("li",[a("p",[s._v("存储方式不同")]),s._v(" "),a("p",[s._v("cookie中只能保管ASCII字符串，并需要通过编码方式存储为Unicode字符或者二进制数据。")]),s._v(" "),a("p",[s._v("session中能够存储任何类型的数据，包括且不限于string，integer，list，map等。")])]),s._v(" "),a("li",[a("p",[s._v("隐私策略不同")]),s._v(" "),a("p",[s._v("cookie对客户端是可见的，别有用心的人可以分析存放在本地的cookie并进行cookie欺骗，所以它是不安全的。")]),s._v(" "),a("p",[s._v("session存储在服务器上，不存在敏感信息泄漏的风险。")])]),s._v(" "),a("li",[a("p",[s._v("有效期上不同")]),s._v(" "),a("p",[s._v("开发可以通过设置cookie的属性，达到使cookie长期有效的效果。")]),s._v(" "),a("p",[s._v("session依赖于名为JSESSIONID的cookie，而cookie JSESSIONID的过期时间默认为-1，只需关闭窗口该session就会失效，因而session不能达到长期有效的效果。")])]),s._v(" "),a("li",[a("p",[s._v("服务器压力不同\ncookie保管在客户端，不占用服务器资源。对于并发用户十分多的网站，cookie是很好的选择。")]),s._v(" "),a("p",[s._v("session是保管在服务器端的，每个用户都会产生一个session。假如并发访问的用户十分多，会产生十分多的session，耗费大量的内存。")])])]),s._v(" "),a("h2",{attrs:{id:"jsp和servlet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsp和servlet"}},[s._v("#")]),s._v(" Jsp和Servlet")]),s._v(" "),a("ol",[a("li",[s._v("区别")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("相同点：\njsp经编译后就变成了servlet，jsp本质就是servlet，jvm只能识别java的类，不能识别jsp代码，web容器将jsp的代码编译成jvm能够识别的java类。其实就是当你通过 http 请求一个 JSP 页面是，首先 Tomcat 会调用 service（）方法将JSP编译成为 Servlet，然后执行 Servlet。")])]),s._v(" "),a("li",[a("p",[s._v("不同点：\nJSP侧重视图，Sevlet主要用于控制逻辑。\nServlet中没有内置对象 。\nJSP中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。")])])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("Servlet的生命周期")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1. servlet对象创建时，调用此方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletConfig")]),s._v(" servletConfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2. 用户访问servlet时，调用此方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletRequest")]),s._v(" servletRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ServletResponse")]),s._v(" servletResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3. servlet对象销毁时，调用此方法")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("destroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("JSP九大内置对象")])]),s._v(" "),a("ul",[a("li",[s._v("out对象：用于向客户端、浏览器输出数据。")]),s._v(" "),a("li",[s._v("request对象：封装了来自客户端、浏览器的各种信息。")]),s._v(" "),a("li",[s._v("response对象：封装了服务器的响应信息。")]),s._v(" "),a("li",[s._v("exception对象：封装了jsp程序执行过程中发生的异常和错误信息。")]),s._v(" "),a("li",[s._v("config对象：封装了应用程序的配置信息。")]),s._v(" "),a("li",[s._v("page对象：指向了当前jsp程序本身。")]),s._v(" "),a("li",[s._v("session对象：用来保存会话信息。也就是说，可以实现在同一用户的不同请求之间共享数")]),s._v(" "),a("li",[s._v("application对象：代表了当前应用程序的上下文。可以在不同的用户之间共享信息。")]),s._v(" "),a("li",[s._v("pageContext对象：提供了对jsp页面所有对象以及命名空间的访问。")])]),s._v(" "),a("h2",{attrs:{id:"ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[s._v("#")]),s._v(" Ajax")]),s._v(" "),a("p",[s._v('Ajax 即"Asynchronous JavaScript And XML"（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。')]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("     $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        选项\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("常见的选项有")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 请求方式"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 常见的值有"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"get"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"post"')]),s._v("等"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("默认值")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("url")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 请求的路径"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/ajax/hello"')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("data")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 请求的参数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 参数的常见写法有 键值对或者json\n    方式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tom "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" pwd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n    方式"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tom"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string-property property"}},[s._v('"pwd"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("success")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("请求成功后的回调函数 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("返回值的参数名")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("contentType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 用来设置请求参数的mime类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("默认值")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("表单的enctype默认值 name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" tom "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" pwd"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("error")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("ajax请求时内部发生错误时执行的回调函数 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("dataType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("指定返回值的类型 常见值"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("text json\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[s._v("async")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("是否异步 默认值"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("优势：")]),s._v(" "),a("ol",[a("li",[s._v("通过异步模式，提升了用户体验")]),s._v(" "),a("li",[s._v("优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用")]),s._v(" "),a("li",[s._v("Ajax引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);