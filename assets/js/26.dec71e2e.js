(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{425:function(t,a,s){"use strict";s.r(a);var r=s(34),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"算法与数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法与数据结构"}},[t._v("#")]),t._v(" 算法与数据结构")]),t._v(" "),s("h2",{attrs:{id:"数据结构和算法的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和算法的关系"}},[t._v("#")]),t._v(" 数据结构和算法的关系")]),t._v(" "),s("p",[t._v("数据结构与算法相辅相成，数据结构是为算法服务的，算法要作用在特定的数据结构之上。\n因此，我们无法孤立数据结构来讲算法，也无法孤立算法来讲数据结构。\n比如，因为数组具有随机访问的特点，常用的二分查找算法需要用数组来存储数据。但如果\n我们选择链表这种数据结构，二分查找算法就无法工作了，因为链表并不支持随机访问。\n数据结构是静态的，它只是组织数据的一种方式。\n如果不在它的基础上操作、构建算法，孤立存在的数据结构就是没用的。")]),t._v(" "),s("h2",{attrs:{id:"复杂度分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[t._v("#")]),t._v(" 复杂度分析")]),t._v(" "),s("p",[t._v("数据结构和算法解决的是如何更省、更快地存储和处理数据的问题，因此，我们就需要一个考量效率和资源消耗的方法，这就是复杂度分析方法。")]),t._v(" "),s("p",[t._v("所以，如果你只掌握了数据结构和算法的特点、用法，但是没有学会复杂度分析，那就相当于只知道操作口诀，而没掌握心法。")]),t._v(" "),s("p",[t._v("一定要花大力气来啃，必须要拿下，并且要搞得非常熟练。否则，后面的数据结构和算法也很难学好。")]),t._v(" "),s("h2",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")])])}),[],!1,null,null,null);a.default=e.exports}}]);