(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{428:function(_,t,n){"use strict";n.r(t);var a=n(34),i=Object(a.a)({},(function(){var _=this,t=_.$createElement,n=_._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[n("h1",{attrs:{id:"nginx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[_._v("#")]),_._v(" Nginx")]),_._v(" "),n("h2",{attrs:{id:"_1-nginx是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx是什么"}},[_._v("#")]),_._v(" 1.Nginx是什么")]),_._v(" "),n("p",[_._v("Nginx 是一个高性能的 HTTP 和反向代理服务器，及电子邮件代理服务器，同时也是一个非常高效的反向代理、负载平衡。")]),_._v(" "),n("h2",{attrs:{id:"_2-nginx的作用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx的作用"}},[_._v("#")]),_._v(" 2.Nginx的作用")]),_._v(" "),n("ol",[n("li",[_._v("反向代理，将多台服务器代理成一台服务器。")]),_._v(" "),n("li",[_._v("负载均衡，将多个请求均匀的分配到多台服务器上，减轻每台服务器的压力，提高    服务的吞吐量。")]),_._v(" "),n("li",[_._v("动静分离，nginx 可以用作静态文件的缓存服务器，提高访问速度")])]),_._v(" "),n("h2",{attrs:{id:"_3-nginx的优势"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-nginx的优势"}},[_._v("#")]),_._v(" 3.Nginx的优势")]),_._v(" "),n("ul",[n("li",[_._v("可以高并发连接（5 万并发，实际也能支持 2~4 万并发）。")]),_._v(" "),n("li",[_._v("内存消耗少。")]),_._v(" "),n("li",[_._v("成本低廉。")]),_._v(" "),n("li",[_._v("配置文件非常简单。")]),_._v(" "),n("li",[_._v("支持 Rewrite 重写。")]),_._v(" "),n("li",[_._v("内置的健康检查功能。")]),_._v(" "),n("li",[_._v("节省带宽。")]),_._v(" "),n("li",[_._v("稳定性高。")]),_._v(" "),n("li",[_._v("支持热部署。")])]),_._v(" "),n("h2",{attrs:{id:"_4-反向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-反向代理"}},[_._v("#")]),_._v(" 4.反向代理")]),_._v(" "),n("p",[_._v("反向代理是指以代理服务器来接受 internet 上的连接请求，然后将请求，发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。")]),_._v(" "),n("p",[_._v("反向代理总结就一句话：代理端代理的是服务端.")]),_._v(" "),n("h2",{attrs:{id:"_5-正向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-正向代理"}},[_._v("#")]),_._v(" 5.正向代理")]),_._v(" "),n("p",[_._v("一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。")]),_._v(" "),n("p",[_._v("正向代理总结就一句话：代理端代理的是客户端。")]),_._v(" "),n("h2",{attrs:{id:"_6-负载均衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-负载均衡"}},[_._v("#")]),_._v(" 6.负载均衡")]),_._v(" "),n("p",[_._v("负载均衡即是代理服务器将接收的请求均衡的分发到各服务器中，负\n载均衡主要解决网络拥塞问题，提高服务器响应速度，服务就近提供，达到更好的访问质量，减少后台服务器大并发压力。")]),_._v(" "),n("h2",{attrs:{id:"_7-nginx如何处理一个请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-nginx如何处理一个请求"}},[_._v("#")]),_._v(" 7.Nginx如何处理一个请求")]),_._v(" "),n("ul",[n("li",[n("p",[_._v("首先，nginx 在启动时，会解析配置文件，得到需要监听的端口与 ip地址，然后在 nginx 的 master 进程里面先初始化好这个监控的 socket，再进行listen,然后再 fork 出多个子进程出来, 子进程会竞争 accept 新的连接。")])]),_._v(" "),n("li",[n("p",[_._v("此时,客户端就可以向 nginx 发起连接了。当客户端与 nginx 进行三次握手，与 nginx\n建立好一个连接后,此时，某一个子进程会 accept 成功，然后创建 nginx 对连接的封装，即 ngx_connection_t 结构体,接着，根据事件调用相应的事件处理模块，如 http 模块与客户端进行数据的交换。")])]),_._v(" "),n("li",[n("p",[_._v("最后，nginx 或客户端来主动关掉连接，到此，一个连接就寿终正寝了。")])])]),_._v(" "),n("h2",{attrs:{id:"_8-为什么nginx性能这么高"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-为什么nginx性能这么高"}},[_._v("#")]),_._v(" 8.为什么Nginx性能这么高")]),_._v(" "),n("p",[_._v("得益于它的事件处理机制：异步非阻塞事件处理机制：运用了 epoll模型，提供了一个队列，排队解决。")])])}),[],!1,null,null,null);t.default=i.exports}}]);